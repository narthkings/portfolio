# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type experience {
  id: ID!
  name_of_company: String
  role: String
  start_date: String
  end_date: String
  content: experience_content_Document
  ord: Int
}

type experience_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input experienceWhereUniqueInput {
  id: ID
}

input experienceWhereInput {
  AND: [experienceWhereInput!]
  OR: [experienceWhereInput!]
  NOT: [experienceWhereInput!]
  id: IDFilter
  name_of_company: StringFilter
  role: StringFilter
  start_date: StringFilter
  end_date: StringFilter
  ord: IntFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input experienceOrderByInput {
  id: OrderDirection
  name_of_company: OrderDirection
  role: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  ord: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input experienceUpdateInput {
  name_of_company: String
  role: String
  start_date: String
  end_date: String
  content: JSON
  ord: Int
}

input experienceUpdateArgs {
  where: experienceWhereUniqueInput!
  data: experienceUpdateInput!
}

input experienceCreateInput {
  name_of_company: String
  role: String
  start_date: String
  end_date: String
  content: JSON
  ord: Int
}

type contact {
  id: ID!
  name: String
  email: String
  message: String
}

input contactWhereUniqueInput {
  id: ID
}

input contactWhereInput {
  AND: [contactWhereInput!]
  OR: [contactWhereInput!]
  NOT: [contactWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  message: StringFilter
}

input contactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  message: OrderDirection
}

input contactUpdateInput {
  name: String
  email: String
  message: String
}

input contactUpdateArgs {
  where: contactWhereUniqueInput!
  data: contactUpdateInput!
}

input contactCreateInput {
  name: String
  email: String
  message: String
}

type portfolioProject {
  id: ID!
  name: String
  description: String
  projectUrl: String
  badges(
    where: stackWhereInput! = {}
    orderBy: [stackOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stack!]
  badgesCount(where: stackWhereInput! = {}): Int
}

input portfolioProjectWhereUniqueInput {
  id: ID
}

input portfolioProjectWhereInput {
  AND: [portfolioProjectWhereInput!]
  OR: [portfolioProjectWhereInput!]
  NOT: [portfolioProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  projectUrl: StringFilter
  badges: stackManyRelationFilter
}

input stackManyRelationFilter {
  every: stackWhereInput
  some: stackWhereInput
  none: stackWhereInput
}

input portfolioProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  projectUrl: OrderDirection
}

input portfolioProjectUpdateInput {
  name: String
  description: String
  projectUrl: String
  badges: stackRelateToManyForUpdateInput
}

input stackRelateToManyForUpdateInput {
  disconnect: [stackWhereUniqueInput!]
  set: [stackWhereUniqueInput!]
  create: [stackCreateInput!]
  connect: [stackWhereUniqueInput!]
}

input portfolioProjectUpdateArgs {
  where: portfolioProjectWhereUniqueInput!
  data: portfolioProjectUpdateInput!
}

input portfolioProjectCreateInput {
  name: String
  description: String
  projectUrl: String
  badges: stackRelateToManyForCreateInput
}

input stackRelateToManyForCreateInput {
  create: [stackCreateInput!]
  connect: [stackWhereUniqueInput!]
}

type stack {
  id: ID!
  name: String
}

input stackWhereUniqueInput {
  id: ID
}

input stackWhereInput {
  AND: [stackWhereInput!]
  OR: [stackWhereInput!]
  NOT: [stackWhereInput!]
  id: IDFilter
  name: StringFilter
}

input stackOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input stackUpdateInput {
  name: String
}

input stackUpdateArgs {
  where: stackWhereUniqueInput!
  data: stackUpdateInput!
}

input stackCreateInput {
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createexperience(data: experienceCreateInput!): experience
  createExperiences(data: [experienceCreateInput!]!): [experience]
  updateexperience(
    where: experienceWhereUniqueInput!
    data: experienceUpdateInput!
  ): experience
  updateExperiences(data: [experienceUpdateArgs!]!): [experience]
  deleteexperience(where: experienceWhereUniqueInput!): experience
  deleteExperiences(where: [experienceWhereUniqueInput!]!): [experience]
  createcontact(data: contactCreateInput!): contact
  createContacts(data: [contactCreateInput!]!): [contact]
  updatecontact(
    where: contactWhereUniqueInput!
    data: contactUpdateInput!
  ): contact
  updateContacts(data: [contactUpdateArgs!]!): [contact]
  deletecontact(where: contactWhereUniqueInput!): contact
  deleteContacts(where: [contactWhereUniqueInput!]!): [contact]
  createportfolioProject(data: portfolioProjectCreateInput!): portfolioProject
  createPortfolioProjects(
    data: [portfolioProjectCreateInput!]!
  ): [portfolioProject]
  updateportfolioProject(
    where: portfolioProjectWhereUniqueInput!
    data: portfolioProjectUpdateInput!
  ): portfolioProject
  updatePortfolioProjects(
    data: [portfolioProjectUpdateArgs!]!
  ): [portfolioProject]
  deleteportfolioProject(
    where: portfolioProjectWhereUniqueInput!
  ): portfolioProject
  deletePortfolioProjects(
    where: [portfolioProjectWhereUniqueInput!]!
  ): [portfolioProject]
  createstack(data: stackCreateInput!): stack
  createStacks(data: [stackCreateInput!]!): [stack]
  updatestack(where: stackWhereUniqueInput!, data: stackUpdateInput!): stack
  updateStacks(data: [stackUpdateArgs!]!): [stack]
  deletestack(where: stackWhereUniqueInput!): stack
  deleteStacks(where: [stackWhereUniqueInput!]!): [stack]
}

type Query {
  experiences(
    where: experienceWhereInput! = {}
    orderBy: [experienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [experience!]
  experience(where: experienceWhereUniqueInput!): experience
  experiencesCount(where: experienceWhereInput! = {}): Int
  contacts(
    where: contactWhereInput! = {}
    orderBy: [contactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [contact!]
  contact(where: contactWhereUniqueInput!): contact
  contactsCount(where: contactWhereInput! = {}): Int
  portfolioProjects(
    where: portfolioProjectWhereInput! = {}
    orderBy: [portfolioProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [portfolioProject!]
  portfolioProject(where: portfolioProjectWhereUniqueInput!): portfolioProject
  portfolioProjectsCount(where: portfolioProjectWhereInput! = {}): Int
  stacks(
    where: stackWhereInput! = {}
    orderBy: [stackOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [stack!]
  stack(where: stackWhereUniqueInput!): stack
  stacksCount(where: stackWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
