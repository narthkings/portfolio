# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type experience {
  id: ID!
  name_of_company: String
  role: String
  start_date: String
  end_date: String
  content: experience_content_Document
}

type experience_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input experienceWhereUniqueInput {
  id: ID
}

input experienceWhereInput {
  AND: [experienceWhereInput!]
  OR: [experienceWhereInput!]
  NOT: [experienceWhereInput!]
  id: IDFilter
  name_of_company: StringFilter
  role: StringFilter
  start_date: StringFilter
  end_date: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input experienceOrderByInput {
  id: OrderDirection
  name_of_company: OrderDirection
  role: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input experienceUpdateInput {
  name_of_company: String
  role: String
  start_date: String
  end_date: String
  content: JSON
}

input experienceUpdateArgs {
  where: experienceWhereUniqueInput!
  data: experienceUpdateInput!
}

input experienceCreateInput {
  name_of_company: String
  role: String
  start_date: String
  end_date: String
  content: JSON
}

type contactMe {
  id: ID!
  name: String
  email: String
  message: String
  content: contactMe_content_Document
}

type contactMe_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input contactMeWhereUniqueInput {
  id: ID
}

input contactMeWhereInput {
  AND: [contactMeWhereInput!]
  OR: [contactMeWhereInput!]
  NOT: [contactMeWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  message: StringFilter
}

input contactMeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  message: OrderDirection
}

input contactMeUpdateInput {
  name: String
  email: String
  message: String
  content: JSON
}

input contactMeUpdateArgs {
  where: contactMeWhereUniqueInput!
  data: contactMeUpdateInput!
}

input contactMeCreateInput {
  name: String
  email: String
  message: String
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createexperience(data: experienceCreateInput!): experience
  createExperiences(data: [experienceCreateInput!]!): [experience]
  updateexperience(
    where: experienceWhereUniqueInput!
    data: experienceUpdateInput!
  ): experience
  updateExperiences(data: [experienceUpdateArgs!]!): [experience]
  deleteexperience(where: experienceWhereUniqueInput!): experience
  deleteExperiences(where: [experienceWhereUniqueInput!]!): [experience]
  createcontactMe(data: contactMeCreateInput!): contactMe
  createContactMes(data: [contactMeCreateInput!]!): [contactMe]
  updatecontactMe(
    where: contactMeWhereUniqueInput!
    data: contactMeUpdateInput!
  ): contactMe
  updateContactMes(data: [contactMeUpdateArgs!]!): [contactMe]
  deletecontactMe(where: contactMeWhereUniqueInput!): contactMe
  deleteContactMes(where: [contactMeWhereUniqueInput!]!): [contactMe]
}

type Query {
  experiences(
    where: experienceWhereInput! = {}
    orderBy: [experienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [experience!]
  experience(where: experienceWhereUniqueInput!): experience
  experiencesCount(where: experienceWhereInput! = {}): Int
  contactMes(
    where: contactMeWhereInput! = {}
    orderBy: [contactMeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [contactMe!]
  contactMe(where: contactMeWhereUniqueInput!): contactMe
  contactMesCount(where: contactMeWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
